<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大学test</title>
      <link href="/2024/05/04/%E5%A4%A7%E5%AD%A6test/"/>
      <url>/2024/05/04/%E5%A4%A7%E5%AD%A6test/</url>
      
        <content type="html"><![CDATA[<p>juest a test.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 大学生涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是css变量？</title>
      <link href="/2024/05/03/%E4%BB%80%E4%B9%88%E6%98%AFcss%E5%8F%98%E9%87%8F%EF%BC%9F/"/>
      <url>/2024/05/03/%E4%BB%80%E4%B9%88%E6%98%AFcss%E5%8F%98%E9%87%8F%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-变量详解"><a href="#CSS-变量详解" class="headerlink" title="CSS 变量详解"></a>CSS 变量详解</h1><h2 id="什么是-CSS-变量？"><a href="#什么是-CSS-变量？" class="headerlink" title="什么是 CSS 变量？"></a>什么是 CSS 变量？</h2><p>CSS 变量（也被称为“自定义属性”）是在 CSS 中存储特定值以便重用的一种方法。这些变量在 CSS 代码中以两个连字符（<code>--</code>）开头，可以在文档的任何地方使用，从而提高了代码的灵活性和可维护性。</p><h2 id="CSS-变量解决了什么问题？"><a href="#CSS-变量解决了什么问题？" class="headerlink" title="CSS 变量解决了什么问题？"></a>CSS 变量解决了什么问题？</h2><p>CSS 变量主要解决了以下几个问题：</p><ol><li><strong>重复性</strong>: 在传统 CSS 中，相同的值（如颜色、字体大小等）需要在多处重复定义。CSS 变量允许你在一个地方定义这些值，然后在整个样式表中重复使用这个变量。</li><li><strong>可维护性</strong>: 更新样式时，只需改变一个地方的变量值，整个网站的相关样式都会自动更新，简化了维护工作。</li><li><strong>动态性</strong>: CSS 变量可以通过 JavaScript 动态更新，这使得实现主题切换或响应式设计等功能变得更加简单。</li></ol><h2 id="为什么要使用-CSS-变量？"><a href="#为什么要使用-CSS-变量？" class="headerlink" title="为什么要使用 CSS 变量？"></a>为什么要使用 CSS 变量？</h2><p>使用 CSS 变量的理由包括：</p><ul><li><strong>灵活性</strong>: 可以在任何 CSS 属性中使用 CSS 变量。</li><li><strong>全局与局部作用域</strong>: 可以将变量定义在<code>:root</code>（全局）或任何特定选择器（局部）中。</li><li><strong>与 JavaScript 的交互</strong>: 可以很容易地通过 JavaScript 读取或修改变量的值，使得网站可以实现更多动态和交互性强的功能。</li></ul><h2 id="使用-CSS-变量的好处"><a href="#使用-CSS-变量的好处" class="headerlink" title="使用 CSS 变量的好处"></a>使用 CSS 变量的好处</h2><ul><li><strong>一致性</strong>: 维持设计的一致性更加容易，因为所有使用变量的地方都引用同一个值。</li><li><strong>灵活调整</strong>: 调整主题或进行样式调整更为便捷，只需要修改少数几个变量值。</li><li><strong>代码简洁</strong>: 减少了代码的重复，使得 CSS 文件更加整洁和易于管理。</li></ul><h2 id="CSS-变量在定制样式时的竞品"><a href="#CSS-变量在定制样式时的竞品" class="headerlink" title="CSS 变量在定制样式时的竞品"></a>CSS 变量在定制样式时的竞品</h2><p>CSS 变量的主要竞品可以从以下几个方面来看：</p><ol><li><strong>预处理器变量（如 Sass, Less）</strong>: 这些工具也提供变量功能，但它们在编译时处理变量，不支持运行时的动态更改。</li><li><strong>JavaScript 样式操作</strong>: 直接通过 JavaScript 操作样式，虽然灵活，但通常会比使用 CSS 变量更复杂，且可能影响性能。</li><li><strong>内联样式</strong>: 直接在 HTML 元素上定义样式，提供最高优先级的控制，但不利于样式的复用和维护。</li></ol><h2 id="CSS-变量的不足之处"><a href="#CSS-变量的不足之处" class="headerlink" title="CSS 变量的不足之处"></a>CSS 变量的不足之处</h2><ol><li><strong>浏览器兼容性</strong>: 虽然大多数现代浏览器都支持 CSS 变量，但在一些旧的浏览器（如 Internet Explorer）中不被支持。</li><li><strong>性能考虑</strong>: 在一些极端情况下，频繁地改变 CSS 变量的值可能会引起性能问题。</li><li><strong>复杂性</strong>: 对于初学者或者不熟悉 CSS 工作方式的开发者来说，理解和正确使用 CSS 变量可能会有一定的学习曲线。</li><li><strong>调试难度</strong>: 调试样式问题可能比直接使用具体值更加复杂，因为需要追踪变量的定义和使用情况。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅度对比 Shadcn 与 Ant Design</title>
      <link href="/2024/04/30/%E6%B5%85%E5%BA%A6%E5%AF%B9%E6%AF%94%20Shadcn%20%E4%B8%8E%20Ant%20Design/"/>
      <url>/2024/04/30/%E6%B5%85%E5%BA%A6%E5%AF%B9%E6%AF%94%20Shadcn%20%E4%B8%8E%20Ant%20Design/</url>
      
        <content type="html"><![CDATA[<h3 id="Shadcn-与-Antd-是什么？"><a href="#Shadcn-与-Antd-是什么？" class="headerlink" title="Shadcn 与 Antd 是什么？"></a>Shadcn 与 Antd 是什么？</h3><p><strong>Shadcn UI</strong></p><ul><li><strong>概述</strong>: Shadcn UI 是一个包含可重用 UI 组件的集合，这些组件可以直接复制粘贴到你的应用中，不需要通过 npm 包管理系统进行安装。</li></ul><blockquote><p>如何理解可重用性？<br>在软件开发中，可重用性指的是某个组件或代码块能够在多个项目或应用程序中使用，而无需进行大量修改。对于 Shadcn UI 提到的可重用 UI 组件，这意味着这些组件被设计为通用性强，易于集成，可以在不同的项目中反复使用。</p></blockquote><ul><li><strong>解决的问题</strong>: 提供快速且灵活的方法实现自定义 UI 组件，减少开发时间并增加项目的个性化。</li></ul><p><strong>Ant Design</strong></p><ul><li><strong>概述</strong>: Ant Design 是基于 React 的企业级 UI 设计语言和组件库，提供一整套设计工具和组件，以增强应用的界面一致性和用户体验。</li><li><strong>解决的问题</strong>: 通过一套成熟的组件库和设计规范，提高开发效率，确保产品设计的一致性。</li></ul><hr><h3 id="为什么选择-Shadcn-UI"><a href="#为什么选择-Shadcn-UI" class="headerlink" title="为什么选择 Shadcn UI"></a>为什么选择 Shadcn UI</h3><ul><li>提供极大的灵活性和简易的集成方式，特别适合需要快速部署和具有特定设计需求的小型项目。</li><li>Ant Design 虽然功能全面，但其规范性不适合需要高度定制的场景。<blockquote><p>如何理解规范性？<br>1 设计语言和风格统一：Ant Design 提供了一套完整的设计语言，包括颜色、字体、布局等视觉风格的详细规范。这种统一的设计语言帮助保持应用界面的一致性，减少用户的学习成本。<br>2 组件标准化：Ant Design 的组件库中的每个组件都遵循严格的接口和交互标准。例如，按钮、输入框、表格等组件都有明确的样式和行为规范，确保在不同的项目中都能保持一致的表现。</p></blockquote></li></ul><h3 id="为什么选择-Ant-Design"><a href="#为什么选择-Ant-Design" class="headerlink" title="为什么选择 Ant Design"></a>为什么选择 Ant Design</h3><ul><li>原因：为大型项目提供稳定支持，具备丰富的组件和实用的设计规范，有助于提高团队协作效率和项目的可维护性。</li><li>虽然 Shadcn UI 更为灵活，但在大规模或需要维护长期一致性的项目中，每次手动集成组件可能会降低效率或提高风险。</li></ul><hr><h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h3><p><strong>选择 Shadcn UI 的场景</strong>：</p><ul><li>创业公司、个人项目或需要特定定制的开发环境。</li><li>ROI：初期成本低，但可能需要在项目扩展时考虑额外的维护成本。</li></ul><p><strong>选择 Ant Design 的场景</strong>：</p><ul><li>大型企业、需要高度一致性和可扩展性的复杂应用，如企业级后台管理系统。</li><li>ROI：虽然初期投入（如培训和集成）较大，长期来看可以节省维护成本，提高工作效率，具有较高的投资回报率。</li></ul><h3 id="Shadcn-的使用体验"><a href="#Shadcn-的使用体验" class="headerlink" title="Shadcn 的使用体验"></a>Shadcn 的使用体验</h3><p>官网中主题选项中可以通过若干选项 快速实现一套自定义 ui 的功能着实让人眼前一亮<br><img src="https://i.mji.rip/2024/04/30/7dd2281670021ed625a312e96a85984d.jpeg" alt="主题选择"><br>在初次使用某个组件时再单独 cli 也确实繁琐 不如隔壁 antd 的仅需安装到库就能畅享所有组件<br><img src="https://i.mji.rip/2024/04/30/6cd026b9f0f3e229425c0789e4a32bc2.jpeg" alt="安装"></p><h3 id="社区对比"><a href="#社区对比" class="headerlink" title="社区对比"></a>社区对比</h3><table><thead><tr><th></th><th>Stars</th><th>Forks</th><th>Used By</th><th>Contributors</th></tr></thead><tbody><tr><td>Antd</td><td>90.3k</td><td>46k</td><td>578k</td><td>2111</td></tr><tr><td>Shadcn</td><td>57.4k</td><td>3.1k</td><td>4.2k</td><td>190</td></tr></tbody></table><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>二者的选择本质上就是灵活性和规范性的取舍问题<br>选择 Shadcn UI 还是 Ant Design 取决于具体项目需求、预算、团队结构和项目规模。对于快速发展和需要个性化设计的小项目，Shadcn UI 可能是一个更合适的选择。对于需要长期稳定和高效协作的大型企业项目，Ant Design 提供了强大的支持和高效的开发流程。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shadcn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规范的 git commit</title>
      <link href="/2024/04/29/%E8%A7%84%E8%8C%83%E7%9A%84%20git%20commit/"/>
      <url>/2024/04/29/%E8%A7%84%E8%8C%83%E7%9A%84%20git%20commit/</url>
      
        <content type="html"><![CDATA[<h2 id="Commit-Message-格式"><a href="#Commit-Message-格式" class="headerlink" title="Commit Message 格式"></a>Commit Message 格式</h2><p><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></p><h3 id="Type（必须）"><a href="#Type（必须）" class="headerlink" title="Type（必须）"></a>Type（必须）</h3><p>Type 用于说明 git commit 的类别，只允许使用以下标识：</p><ul><li><strong>feat</strong>：新增功能（feature）。</li><li><strong>fix&#x2F;to</strong>：修复 bug。<ul><li><strong>fix</strong>：产生 diff 并自动修复此问题。适合于一次提交直接修复问题。</li><li><strong>to</strong>：只产生 diff 不自动修复此问题。适合于多次提交。最终修复问题提交时使用 fix。</li></ul></li><li><strong>docs</strong>：文档（documentation）。</li><li><strong>style</strong>：格式（不影响代码运行的变动）。</li><li><strong>refactor</strong>：重构（即不是新增功能，也不是修改 bug 的代码变动）。</li><li><strong>perf</strong>：优化相关，比如提升性能、体验。</li><li><strong>test</strong>：增加测试。</li><li><strong>chore</strong>：构建过程或辅助工具的变动。</li><li><strong>revert</strong>：回滚到上一个版本。</li><li><strong>merge</strong>：代码合并。</li><li><strong>sync</strong>：同步主线或分支的 Bug。</li></ul><h3 id="Scope（可选）"><a href="#Scope（可选）" class="headerlink" title="Scope（可选）"></a>Scope（可选）</h3><p>Scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。例如在 Angular，可以是<code>location</code>、<code>browser</code>、<code>compile</code>、<code>rootScope</code>、<code>ngHref</code>、<code>ngClick</code>、<code>ngView</code>等。如果你的修改影响了不止一个 scope，你可以使用<code>*</code>代替。</p><h3 id="Subject（必须）"><a href="#Subject（必须）" class="headerlink" title="Subject（必须）"></a>Subject（必须）</h3><p>Subject 是 commit 目的的简短描述，不超过 50 个字符。</p><ul><li>建议使用中文，以便更清晰地描述问题。</li><li>结尾不加句号或其他标点符号。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fix(DAO):用户查询缺少username属性</span><br><span class="line">feat(Controller):用户查询接口开发</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五天速成electron——day0</title>
      <link href="/2024/04/23/%E4%BA%94%E5%A4%A9%E9%80%9F%E6%88%90electron%E2%80%94%E2%80%94day0/"/>
      <url>/2024/04/23/%E4%BA%94%E5%A4%A9%E9%80%9F%E6%88%90electron%E2%80%94%E2%80%94day0/</url>
      
        <content type="html"><![CDATA[<h3 id="Electron-的由来"><a href="#Electron-的由来" class="headerlink" title="Electron 的由来"></a>Electron 的由来</h3><p>如果想开发一个桌面 GUI 应用软件，希望其能同时在 Windows、Linux 和 Mac 平台上运行，可选的技术框架并不多，在早期人们主要用 <a href="https://www.wxwidgets.org/">wxWidgets</a>、<a href="https://www.gtk.org/">GTK</a> 或 <a href="https://www.gtk.org/">Qt</a> 来做这类工作。</p><p>这类框架大都是以 C&#x2F;C++语言开发，受语言开发效率的限制，开发者想通过它们快速的完成桌面应用的开发工作十分困难。近几年相继出现了现代编程语言针对这些框架的绑定库，诸如 Python、C#、Go 等，大部分都是开源社区提供的，但由于历史原因，要想用到这些框架的全部特性，还是需要编写 C&#x2F;C++代码。并且高质量的 Node.js 的绑定库几乎没有，前端程序员想通过这类框架开发桌面应用更是难上加难。</p><p>Stack Overflow 的联合创始人 Jeff Atwood 曾经说过，<strong>凡能用 JavaScript 实现的，注定会被用 JavaScript 实现</strong>。桌面 GUI 应用也不例外，近几年两个重量级框架 NW.js 和 Electron 横空出世，给前端开发人员打开了这个领域的大门。</p><blockquote><p>这两个框架都与中国人有极深的渊源，2011 年左右，中国英特尔开源技术中心的王文睿（Roger Wang）希望能用 Node.js 来操作 WebKit，而创建了 node-webkit 项目，这就是 NW.js 的前身。英特尔公司大力支持了这个项目，不但允许王文睿分出一部分精力来做这个开源项目，还给了他招聘名额，允许他招聘其他工程师来一起完成这个项目。<br>2012 年，故事的另一个主角赵成（Cheng Zhao）加入到王文睿的小组，并对 node-webkit 项目做出了大量的改进。后来赵成离开了英特尔，帮助 github 团队尝试把 node-webkit 应用到 Atom 编辑器上，但由于当时 node-webkit 还并不稳定，且 node-webkit 项目的走向也不再受赵成的控制了，这个尝试最终以失败告终。<br>但赵成和 github 团队并没有放弃，而是着手开发另一个类似 node-webkit 的项目：Atom Shell，这个项目就是 Electron 的前身，赵成在这个项目上倾注了大量的心血，这也是这个项目后来广受欢迎的关键因素之一，再后来 github 把这个项目开源出来，最终更名为 Electron。</p></blockquote><h3 id="Electron-的价值"><a href="#Electron-的价值" class="headerlink" title="Electron 的价值"></a>Electron 的价值</h3><p><strong>Electron 和 NW.js 框架都是基于 Chromium 和 Node.js 实现的</strong>，这就使得前端程序员可以使用 JavaScript、HTML 和 CSS 知识轻松构建跨平台的桌面应用。</p><p>传统桌面应用开发的难点，现在看来也变得异常容易，比如绘制漂亮的界面可以使用更灵活的 HTML 和 CSS 提供的能力、实现简单的动效可以用 CSS Animations 或 Web Animations API 来实现。</p><p>为了弥补 Node.js 和前端技术访问系统 API 方面的不足，这两个框架内部都对系统 API 做了封装，比如：系统对话框、系统托盘、系统菜单、剪切板等。开发者基于 Electron 开发应用时，可以直接使用 JavaScript 访问这些 API。其他诸如网络访问控制、本地文件系统的访问控制则由 Node.js 提供支持。这样开发者就可以使用前端技术开发绝大多数桌面应用的需求了。</p><p>前端技术是现如今软件开发领域应用最广泛的技术之一。入门门槛非常低、周边生态繁荣而且历史悠久。相对于基于 C++库开发桌面软件来说，<strong>基于 Electron 开发更容易上手且开发效率更高</strong>。由于 JavaScript 语言是一门解释执行的语言，所以 C++语言固有的各种问题都不再是问题，比如：C++没有垃圾回收机制，开发人员要小心翼翼的控制内存，以免造成内存泄露。C++语言特性繁多且复杂，学习难度曲线陡峭，需要针对不同平台进行编译，应用分发困难等，使用 Electron 开发桌面应用就不用担心这些问题。</p><p>执行效率上，如果前端代码写的足够优秀，完全可以做到与 C++应用相媲美的用户体验，Visual Studio Code 就是先例。另外 Node.js 本身也可以很方便的调用 C++扩展，Electron 应用内又包含 Node.js 环境，对于一些音视频编解码或图形图像处理需求，可以使用 Node.js 的 C++扩展来完成。</p><p>随着几十年 Web 应用大行其道，Web 前端开发领域的技术生态足够繁荣。<strong>Electron 可以使用几乎所有的 Web 前端生态领域及 Node.js 生态领域的组件和技术方案</strong>。目前发布到 <a href="http://npmjs.com/">http://npmjs.com</a> 平台上的模块已经超过 90 万个，覆盖领域广、优秀模块繁多且使用非常简单方便。</p><p>在完成 Web 前端开发工作时，开发者需要考虑很多浏览器兼容的问题，比如：用户是否使用了低版本的 IE 浏览器，是否可以在样式表内使用 flexbox 弹性盒模型等问题。最终会导致前端开发者束手束脚，写一些丑陋的兼容代码以保证自己的工作能在所有终端表现正常。但由于 Electron 内置了 Chromium 浏览器，该浏览器对标准支持非常好，甚至有些标准尚未通过，Chromium 浏览器就已经支持了，所以基于 Electron 开发应用不会遇到这些问题。开发者的自由度得到了最大程度的保护，你几乎可以在 Electron 中使用所有 HTML5、CSS3 、ES6 标准中定义的 API。</p><h3 id="Electron-的原理"><a href="#Electron-的原理" class="headerlink" title="Electron 的原理"></a>Electron 的原理</h3><p>Electron 是一个集成项目，它做了如下几个重要的工作：</p><p>订制 Chromium，并把订制版本的 Chromium 集成在 Electron 内部<br>订制 Node.js，并把订制版本的 Node.js 集成在 Electron 内部<br>通过消息轮训机制打通 Node.js 和 Chromium 的消息循环<br>通过 Electron 的内置模块向开发者提供桌面应用开发必备的 API<br>Electron 框架的内部原理图如下所示：</p><p><img src="https://pic3.zhimg.com/80/v2-ab797e031daf85536c325c94f1f95062_1440w.webp"></p><p>其中 Chromium 基础能力 API 可以让应用渲染开发者提供的 HTML 页面，让应用可以在 Cookie 或 IndexedDB 中存取数据，前端开发者都非常熟悉这些能力。</p><p>Node.js 基础能力 API 可以让开发者读写本地磁盘的文件、通过 socket 访问网络、创建和控制子进程等，Node.js 开发者非常熟悉这些能力。</p><p>Electron 内置模块可以让开发者创建操作系统的托盘图标、访问操作系统的剪切板、发送系统通知，同时它还提供了一系列的 API，允许开发者使用 JavaScript 访问 Chromium 的底层能力。</p><p>下面我们来看一下 Electron 应用的结构：</p><p><img src="https://pic4.zhimg.com/80/v2-fdd8f4e340d6c10754cee5985ec9e6a7_1440w.webp"></p><p><strong>每个 Electron 都是由 1 个主进程、 1 个或多个渲染进程组成的</strong>，开发者的主要工作就是完成主进程的逻辑和渲染进程的逻辑。</p><p>Electron 应用启动时，首先会加载主进程的逻辑，主进程会创建一个或多个窗口，我们暂时可以粗浅的认为一个窗口就代表一个渲染进程，主进程负责管理所有的渲染进程。</p><p>窗口内加载的页面就是开发者要实现的渲染进程的逻辑，我们可以让渲染进程与主进程通信，他们之间是通过 IPC 消息管道进行通信的。虽然有一些特殊的手段让两个渲染进程直接通信（后面的章节我们会介绍），但大部分时候还是通过主进程来中转消息以达到渲染进程间通信的目的。</p><p>Electron 提供的一系列内置模块大部分是专门为主进程的逻辑服务的，比如 app 模块、BrowserWindow 模块和 session 模块等，少量模块是专门为渲染进程的逻辑服务的，比如 ipcRenderer 模块、webFrame 模块等，只有少量模块是两个进程可以同时使用的，比如：clipboard 模块、desktopCapturer 模块等。我们应该清楚这些模块的势力范围，不能在主进程中使用渲染进程的模块，反之也不行。</p><h3 id="Electron-的不足"><a href="#Electron-的不足" class="headerlink" title="Electron 的不足"></a>Electron 的不足</h3><p>基于 Electron 开发桌面 GUI 应用并不是完美的方案，它也有它的不足，综合起来说有以下几点：</p><p>第一：打包后的应用体积巨大</p><p>一个功能不算多的桌面应用，通过 electron-builder 压缩打包后至少要 50M。而且如果开发者不做额外的 Hack 工作的话，用户每次升级应用程序，还要让用户再下载一次同样体积的安装包。这对于应用分发来说是一个不小的负担。但随着网络环境越来越好，用户磁盘的容积越来越大，此问题给用户带来的损失会慢慢被削弱。</p><p>第二：版本发布过快</p><p>为了跟进 Chromium (和 Node.js) 的版本发布节奏，Electron 也有非常频繁的版本发布机制，每次 Chromium 的改动，都可能导致 Electron 冒出很多新的问题，甚至稳定版本都有很多未解决的问题。好在关键核心功能一直以来都是稳定的。</p><p>第三：安全性问题</p><p>Electron 把一些有安全隐患的模块和 API 都设置为默认不可用的状态，但这些模块和 API 都是非常常用的，有的时候开发者不得不打开这些开关，一旦处理不当，就可能导致他们开发的应用存在安全隐患，给开发者乃至终端用户带来伤害。安全问题有很多值得关注的技术细节，以至于 Electron 官方文档中专门开辟出来一个章节号召程序员重视安全问题。</p><p>第五：资源消耗较大</p><p>Electron 底层基于 Chromium 浏览器，资源占用较多一直以来都是 Chromium 被人诟病的问题，目前来看这个问题还没有很好的解决办法，只能依赖 Chromium 团队对 Chromium 的优化工作了。</p><p>第六：性能问题</p><p>Electron 本身是多进程多线程的框架，但 JavaScript 是单线程运行的，如果产品的需求中有大量音视频编解码、复杂数据格式化这类 CPU 消耗性的需求，那么不应该在 Electron 内使用 JavaScript 来实现这些需求，而应该使用 Node.js 的原生模块来实现这些需求。与其说这是一个 Electron 的不足，不如说这是 JavaScript 的不足。</p><p>除了以上这些问题外，Electron 还不支持老版本的 Windows 操作系统，比如 Windows XP，在中国还有一些用户是使用 Windows XP 的，开发者如果需要面向这些用户，应该考虑使用其他技术方案了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>import后面加入{}和不加大括号有什么区别</title>
      <link href="/2024/04/23/import%E5%90%8E%E9%9D%A2%E5%8A%A0%E5%85%A5-%E5%92%8C%E4%B8%8D%E5%8A%A0%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
      <url>/2024/04/23/import%E5%90%8E%E9%9D%A2%E5%8A%A0%E5%85%A5-%E5%92%8C%E4%B8%8D%E5%8A%A0%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>ES6 使用 import 引入定义的模块，我自己总结的 default 和花括号的问题：export default，不能用花括号；export 但是没有 default，用花括号。</p><p>ES6 中 export 及 export default 的区别</p><p>在 JavaScript ES6 中，export 与 export default 均可用于导出常量、函数、文件、模块等，你可以在其它文件或模块中通过 import+(常量 | 函数 | 文件 | 模块)名的方式，将其导入，以便能够对其进行使用，但在一个文件或模块中，export、import 可以有多个，export default 仅有一个。</p><p>1.export 与 export default 均可用于导出常量、函数、文件、模块等</p><p>2.在一个文件或模块中，export 、import 可以有多个，export default 仅有一个</p><p>3.通过 export 方式导出，在导入时要加{ }，export default 则不需要</p><p>4.export 能直接导出变量表达式，export default 不行</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用DNS地址列表和DNS设置教程</title>
      <link href="/2024/04/23/%E5%B8%B8%E7%94%A8DNS%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8/"/>
      <url>/2024/04/23/%E5%B8%B8%E7%94%A8DNS%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一些国内常用-DNS-列表"><a href="#一些国内常用-DNS-列表" class="headerlink" title="一些国内常用 DNS 列表"></a>一些国内常用 DNS 列表</h2><h3 id="1、114DNS：国内用户量巨大的-DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户。"><a href="#1、114DNS：国内用户量巨大的-DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户。" class="headerlink" title="1、114DNS：国内用户量巨大的 DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户。"></a>1、114DNS：国内用户量巨大的 DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户。</h3><p>DNS 服务器 IP 地址：<br>首选：114.114.114.114<br>备选：114.114.114.115</p><h3 id="2、阿里-AliDNS：阿里公共-DNS-是阿里巴巴集团推出的-DNS-递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费-DNS-递归解析服务。"><a href="#2、阿里-AliDNS：阿里公共-DNS-是阿里巴巴集团推出的-DNS-递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费-DNS-递归解析服务。" class="headerlink" title="2、阿里 AliDNS：阿里公共 DNS 是阿里巴巴集团推出的 DNS 递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费 DNS 递归解析服务。"></a>2、阿里 AliDNS：阿里公共 DNS 是阿里巴巴集团推出的 DNS 递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费 DNS 递归解析服务。</h3><p>DNS 服务器 IP 地址：<br>首选：223.5.5.5<br>备选：223.6.6.6</p><h3 id="3、Google-DNS：谷歌公共域名解析服务（Google-Public-DNS）是由谷歌公司于-2009-年发布的一项新的-DNS-服务。主要为了替代-ISPs-或其他公司提供的-DNS-服务。"><a href="#3、Google-DNS：谷歌公共域名解析服务（Google-Public-DNS）是由谷歌公司于-2009-年发布的一项新的-DNS-服务。主要为了替代-ISPs-或其他公司提供的-DNS-服务。" class="headerlink" title="3、Google DNS：谷歌公共域名解析服务（Google Public DNS）是由谷歌公司于 2009 年发布的一项新的 DNS 服务。主要为了替代 ISPs 或其他公司提供的 DNS 服务。"></a>3、Google DNS：谷歌公共域名解析服务（Google Public DNS）是由谷歌公司于 2009 年发布的一项新的 DNS 服务。主要为了替代 ISPs 或其他公司提供的 DNS 服务。</h3><p>已被污染，强烈不推荐！<br>DNS 服务器 IP 地址：<br>首选：8.8.8.8<br>备选：8.8.4.4</p><h3 id="4、OpenDNS：OpenDNS-是一个免费的域名解析服务提供商（DNS）。创建于-2006-年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。"><a href="#4、OpenDNS：OpenDNS-是一个免费的域名解析服务提供商（DNS）。创建于-2006-年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。" class="headerlink" title="4、OpenDNS：OpenDNS 是一个免费的域名解析服务提供商（DNS）。创建于 2006 年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。"></a>4、OpenDNS：OpenDNS 是一个免费的域名解析服务提供商（DNS）。创建于 2006 年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。</h3><p>DNS 服务器 IP 地址：<br>首选：208.67.222.222<br>备选：208.67.220.220</p><h3 id="5、百度-BaiduDNS：百度-DNS-旗下云解析服务-依托百度一流基础设施和强大技术实力-为用户提供免费的、超越竞品的服务体验。"><a href="#5、百度-BaiduDNS：百度-DNS-旗下云解析服务-依托百度一流基础设施和强大技术实力-为用户提供免费的、超越竞品的服务体验。" class="headerlink" title="5、百度 BaiduDNS：百度 DNS 旗下云解析服务,依托百度一流基础设施和强大技术实力,为用户提供免费的、超越竞品的服务体验。"></a>5、百度 BaiduDNS：百度 DNS 旗下云解析服务,依托百度一流基础设施和强大技术实力,为用户提供免费的、超越竞品的服务体验。</h3><p>DNS 服务器 IP 地址：<br>首选：180.76.76.76<br>备用：无</p><h3 id="6、CNNIC-SDNS：SDNS-是由中国互联网络信息中心-CNNIC-正式推出的免费的公共云解析服务-SecureDNS-简称-SDNS-。该服务可为广大网民提供安全、智能、高速的上网接入解析服务。"><a href="#6、CNNIC-SDNS：SDNS-是由中国互联网络信息中心-CNNIC-正式推出的免费的公共云解析服务-SecureDNS-简称-SDNS-。该服务可为广大网民提供安全、智能、高速的上网接入解析服务。" class="headerlink" title="6、CNNIC SDNS：SDNS 是由中国互联网络信息中心(CNNIC)正式推出的免费的公共云解析服务(SecureDNS,简称 SDNS)。该服务可为广大网民提供安全、智能、高速的上网接入解析服务。"></a>6、CNNIC SDNS：SDNS 是由中国互联网络信息中心(CNNIC)正式推出的免费的公共云解析服务(SecureDNS,简称 SDNS)。该服务可为广大网民提供安全、智能、高速的上网接入解析服务。</h3><p>DNS 服务器 IP 地址：<br>首选：1.2.4.8<br>备选：202.98.0.6</p><h3 id="7、DNSPod-DNS-：DNSPod-的-Public-DNS-是目前国内第一家支持-ECS-的公共-DNS，是-DNSPod-推出的公共域名解析服务，可以为全网用户提供域名的公共递归解析服务！"><a href="#7、DNSPod-DNS-：DNSPod-的-Public-DNS-是目前国内第一家支持-ECS-的公共-DNS，是-DNSPod-推出的公共域名解析服务，可以为全网用户提供域名的公共递归解析服务！" class="headerlink" title="7、DNSPod DNS+：DNSPod 的 Public DNS+是目前国内第一家支持 ECS 的公共 DNS，是 DNSPod 推出的公共域名解析服务，可以为全网用户提供域名的公共递归解析服务！"></a>7、DNSPod DNS+：DNSPod 的 Public DNS+是目前国内第一家支持 ECS 的公共 DNS，是 DNSPod 推出的公共域名解析服务，可以为全网用户提供域名的公共递归解析服务！</h3><p>DNS 服务器 IP 地址：<br>首选：119.29.29.29<br>备选：182.254.116.116</p><h2 id="DNS-设置教程（以-WIN10-系统为例）"><a href="#DNS-设置教程（以-WIN10-系统为例）" class="headerlink" title="DNS 设置教程（以 WIN10 系统为例）"></a>DNS 设置教程（以 WIN10 系统为例）</h2><p>第一步：点击桌面右下角，”网络“图标，打开”打开网络和 internet 设置“，</p><p>第二步：选择”以太网“— 点击”更改适配器选项“—找到”本地网络“也就是”以太网“，右键打开，点击”属性“—找到”IPv4“协议，双击打开—点击”使用下面的 DNS 服务器地址“，设置相应的 DNS—点击，确认，设置完成。</p>]]></content>
      
      
      <categories>
          
          <category> 电脑常见故障修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
