<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入比较Shadcn与Antd设计库：从传统UI到Headless组件的全面分析</title>
      <link href="/2024/04/24/%E6%B7%B1%E5%85%A5%E6%AF%94%E8%BE%83Shadcn%E4%B8%8EAntd%E8%AE%BE%E8%AE%A1%E5%BA%93%EF%BC%9A%E4%BB%8E%E4%BC%A0%E7%BB%9FUI%E5%88%B0Headless%E7%BB%84%E4%BB%B6%E7%9A%84%E5%85%A8%E9%9D%A2%E5%88%86%E6%9E%90/"/>
      <url>/2024/04/24/%E6%B7%B1%E5%85%A5%E6%AF%94%E8%BE%83Shadcn%E4%B8%8EAntd%E8%AE%BE%E8%AE%A1%E5%BA%93%EF%BC%9A%E4%BB%8E%E4%BC%A0%E7%BB%9FUI%E5%88%B0Headless%E7%BB%84%E4%BB%B6%E7%9A%84%E5%85%A8%E9%9D%A2%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="深入比较-Shadcn-与-Antd-设计库：从传统-UI-到-Headless-组件的全面分析"><a href="#深入比较-Shadcn-与-Antd-设计库：从传统-UI-到-Headless-组件的全面分析" class="headerlink" title="深入比较 Shadcn 与 Antd 设计库：从传统 UI 到 Headless 组件的全面分析"></a>深入比较 Shadcn 与 Antd 设计库：从传统 UI 到 Headless 组件的全面分析</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本报告全面对比分析了 Shadcn 和 Antd 两种流行的前端 UI 库，特别聚焦于它们在传统 UI 组件和 Headless 组件支持方面的表现。通过详细比较这两种库的设计理念、技术实现、社区支持和市场接受度，本文揭示了它们在不同应用场景下的优势和局限。结果显示，Shadcn 因其高度的自定义能力和现代化的设计而受到新兴项目的青睐，而 Antd 则因其稳定性和丰富的组件库在企业级开发中占据优势。</p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>Shadcn, Antd, 前端库, 用户体验, 技术支持, Headless 组件, UI 设计</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在快速发展的前端技术领域，选择一个合适的 UI 库是确保项目成功的关键因素之一。随着开发者社区对更灵活、更高度定制化的 UI 组件的需求增加，headless 组件库成为了热门的趋势。本报告旨在通过深入分析 Shadcn 和 Antd 的产品特性，为开发团队提供决策支持。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h3><p>Antd 自推出以来，一直是 React 生态系统中最受欢迎的 UI 框架之一，其设计原则和组件质量为众多企业级应用所认可。相比之下，Shadcn 作为新兴的前端库，以其创新的设计思想和灵活的组件结构迅速获得市场关注。</p><h3 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h3><p>本研究采用了定量和定性相结合的方法，通过分析两个库的 GitHub 活动、社区讨论和用户反馈，进行了全面的比较研究。同时，通过访谈开发者和产品经理，收集了第一手的使用反馈和建议。</p><h3 id="调研细节与发现"><a href="#调研细节与发现" class="headerlink" title="调研细节与发现"></a>调研细节与发现</h3><h4 id="组件功能和技术实现"><a href="#组件功能和技术实现" class="headerlink" title="组件功能和技术实现"></a>组件功能和技术实现</h4><ul><li><strong>Antd</strong> 提供了一套完整的解决方案，包括从基础按钮到复杂的数据表格等几乎所有类型的组件。</li><li><strong>Shadcn</strong> 虽然组件种类不如 Antd 丰富，但在每个组件上提供了更多的自定义选项和现代化功能，如动态主题切换和高级动画支持。</li></ul><h4 id="用户体验比较"><a href="#用户体验比较" class="headerlink" title="用户体验比较"></a>用户体验比较</h4><ul><li><strong>Antd</strong> 的组件使用广泛的设计语言，确保了不同组件间的视觉和功能一致性，非常适合需要快速部署的项目。</li><li><strong>Shadcn</strong> 通过提供基于 hooks 的 API 和支持尾部风格定制的组件，使开发者可以构建完全个性化的用户界面。</li></ul><h4 id="Headless-组件的应用"><a href="#Headless-组件的应用" class="headerlink" title="Headless 组件的应用"></a>Headless 组件的应用</h4><ul><li><strong>Shadcn</strong> 的 headless 组件设计允许完全脱离默认样式进行 UI 构建，为创新设计提供了可能。</li><li><strong>Antd</strong> 最近也开始引入更多的无头组件，以提高其库的灵活性和适用性。</li></ul><h3 id="分析与预测"><a href="#分析与预测" class="headerlink" title="分析与预测"></a>分析与预测</h3><h4 id="市场趋势"><a href="#市场趋势" class="headerlink" title="市场趋势"></a>市场趋势</h4><p>随着市场对个性化和高性能应用的需求增长，预计 headless 组件的重要性将进一步提升。</p><h4 id="技术发展"><a href="#技术发展" class="headerlink" title="技术发展"></a>技术发展</h4><p>未来几年内，我们可能会看到更多的 UI 库采纳类似 Shadcn 的灵活设计理念，同时现有的库如 Antd 可能会增强其自定义能力，以保持竞争力。</p><h2 id="结论与建议"><a href="#结论与建议" class="headerlink" title="结论与建议"></a>结论与建议</h2><p>开发团队在选择 UI 库时应考虑项目的具体需求：对于需要快速开发和高度一致性的企业应用，Antd 是一个成熟的选择；对于追求创新和灵活性的新项目，Shadcn 提供了更多的可能性。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/694048244">2024 年了，聊聊 Headless UI &amp; shadcn&#x2F;ui</a><br><a href="https://zhuanlan.zhihu.com/p/690374850">为什么 shadcn ui 能杀入 2023 年前端工具库榜首</a><br><a href="https://pengtikui.cn/weekly/issue-58">第 58 期：细说 shadcn&#x2F;ui</a><br><a href="https://ui.shadcn.com/">Build your component library</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shadcn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五天速成electron——day0</title>
      <link href="/2024/04/23/%E4%BA%94%E5%A4%A9%E9%80%9F%E6%88%90electron%E2%80%94%E2%80%94day0/"/>
      <url>/2024/04/23/%E4%BA%94%E5%A4%A9%E9%80%9F%E6%88%90electron%E2%80%94%E2%80%94day0/</url>
      
        <content type="html"><![CDATA[<h3 id="Electron-的由来"><a href="#Electron-的由来" class="headerlink" title="Electron 的由来"></a>Electron 的由来</h3><p>如果想开发一个桌面 GUI 应用软件，希望其能同时在 Windows、Linux 和 Mac 平台上运行，可选的技术框架并不多，在早期人们主要用 <a href="https://www.wxwidgets.org/">wxWidgets</a>、<a href="https://www.gtk.org/">GTK</a> 或 <a href="https://www.gtk.org/">Qt</a> 来做这类工作。</p><p>这类框架大都是以 C&#x2F;C++语言开发，受语言开发效率的限制，开发者想通过它们快速的完成桌面应用的开发工作十分困难。近几年相继出现了现代编程语言针对这些框架的绑定库，诸如 Python、C#、Go 等，大部分都是开源社区提供的，但由于历史原因，要想用到这些框架的全部特性，还是需要编写 C&#x2F;C++代码。并且高质量的 Node.js 的绑定库几乎没有，前端程序员想通过这类框架开发桌面应用更是难上加难。</p><p>Stack Overflow 的联合创始人 Jeff Atwood 曾经说过，<strong>凡能用 JavaScript 实现的，注定会被用 JavaScript 实现</strong>。桌面 GUI 应用也不例外，近几年两个重量级框架 NW.js 和 Electron 横空出世，给前端开发人员打开了这个领域的大门。</p><blockquote><p>这两个框架都与中国人有极深的渊源，2011 年左右，中国英特尔开源技术中心的王文睿（Roger Wang）希望能用 Node.js 来操作 WebKit，而创建了 node-webkit 项目，这就是 NW.js 的前身。英特尔公司大力支持了这个项目，不但允许王文睿分出一部分精力来做这个开源项目，还给了他招聘名额，允许他招聘其他工程师来一起完成这个项目。<br>2012 年，故事的另一个主角赵成（Cheng Zhao）加入到王文睿的小组，并对 node-webkit 项目做出了大量的改进。后来赵成离开了英特尔，帮助 github 团队尝试把 node-webkit 应用到 Atom 编辑器上，但由于当时 node-webkit 还并不稳定，且 node-webkit 项目的走向也不再受赵成的控制了，这个尝试最终以失败告终。<br>但赵成和 github 团队并没有放弃，而是着手开发另一个类似 node-webkit 的项目：Atom Shell，这个项目就是 Electron 的前身，赵成在这个项目上倾注了大量的心血，这也是这个项目后来广受欢迎的关键因素之一，再后来 github 把这个项目开源出来，最终更名为 Electron。</p></blockquote><h3 id="Electron-的价值"><a href="#Electron-的价值" class="headerlink" title="Electron 的价值"></a>Electron 的价值</h3><p><strong>Electron 和 NW.js 框架都是基于 Chromium 和 Node.js 实现的</strong>，这就使得前端程序员可以使用 JavaScript、HTML 和 CSS 知识轻松构建跨平台的桌面应用。</p><p>传统桌面应用开发的难点，现在看来也变得异常容易，比如绘制漂亮的界面可以使用更灵活的 HTML 和 CSS 提供的能力、实现简单的动效可以用 CSS Animations 或 Web Animations API 来实现。</p><p>为了弥补 Node.js 和前端技术访问系统 API 方面的不足，这两个框架内部都对系统 API 做了封装，比如：系统对话框、系统托盘、系统菜单、剪切板等。开发者基于 Electron 开发应用时，可以直接使用 JavaScript 访问这些 API。其他诸如网络访问控制、本地文件系统的访问控制则由 Node.js 提供支持。这样开发者就可以使用前端技术开发绝大多数桌面应用的需求了。</p><p>前端技术是现如今软件开发领域应用最广泛的技术之一。入门门槛非常低、周边生态繁荣而且历史悠久。相对于基于 C++库开发桌面软件来说，<strong>基于 Electron 开发更容易上手且开发效率更高</strong>。由于 JavaScript 语言是一门解释执行的语言，所以 C++语言固有的各种问题都不再是问题，比如：C++没有垃圾回收机制，开发人员要小心翼翼的控制内存，以免造成内存泄露。C++语言特性繁多且复杂，学习难度曲线陡峭，需要针对不同平台进行编译，应用分发困难等，使用 Electron 开发桌面应用就不用担心这些问题。</p><p>执行效率上，如果前端代码写的足够优秀，完全可以做到与 C++应用相媲美的用户体验，Visual Studio Code 就是先例。另外 Node.js 本身也可以很方便的调用 C++扩展，Electron 应用内又包含 Node.js 环境，对于一些音视频编解码或图形图像处理需求，可以使用 Node.js 的 C++扩展来完成。</p><p>随着几十年 Web 应用大行其道，Web 前端开发领域的技术生态足够繁荣。<strong>Electron 可以使用几乎所有的 Web 前端生态领域及 Node.js 生态领域的组件和技术方案</strong>。目前发布到 <a href="http://npmjs.com/">http://npmjs.com</a> 平台上的模块已经超过 90 万个，覆盖领域广、优秀模块繁多且使用非常简单方便。</p><p>在完成 Web 前端开发工作时，开发者需要考虑很多浏览器兼容的问题，比如：用户是否使用了低版本的 IE 浏览器，是否可以在样式表内使用 flexbox 弹性盒模型等问题。最终会导致前端开发者束手束脚，写一些丑陋的兼容代码以保证自己的工作能在所有终端表现正常。但由于 Electron 内置了 Chromium 浏览器，该浏览器对标准支持非常好，甚至有些标准尚未通过，Chromium 浏览器就已经支持了，所以基于 Electron 开发应用不会遇到这些问题。开发者的自由度得到了最大程度的保护，你几乎可以在 Electron 中使用所有 HTML5、CSS3 、ES6 标准中定义的 API。</p><h3 id="Electron-的原理"><a href="#Electron-的原理" class="headerlink" title="Electron 的原理"></a>Electron 的原理</h3><p>Electron 是一个集成项目，它做了如下几个重要的工作：</p><p>订制 Chromium，并把订制版本的 Chromium 集成在 Electron 内部<br>订制 Node.js，并把订制版本的 Node.js 集成在 Electron 内部<br>通过消息轮训机制打通 Node.js 和 Chromium 的消息循环<br>通过 Electron 的内置模块向开发者提供桌面应用开发必备的 API<br>Electron 框架的内部原理图如下所示：</p><p><img src="https://pic3.zhimg.com/80/v2-ab797e031daf85536c325c94f1f95062_1440w.webp"></p><p>其中 Chromium 基础能力 API 可以让应用渲染开发者提供的 HTML 页面，让应用可以在 Cookie 或 IndexedDB 中存取数据，前端开发者都非常熟悉这些能力。</p><p>Node.js 基础能力 API 可以让开发者读写本地磁盘的文件、通过 socket 访问网络、创建和控制子进程等，Node.js 开发者非常熟悉这些能力。</p><p>Electron 内置模块可以让开发者创建操作系统的托盘图标、访问操作系统的剪切板、发送系统通知，同时它还提供了一系列的 API，允许开发者使用 JavaScript 访问 Chromium 的底层能力。</p><p>下面我们来看一下 Electron 应用的结构：</p><p><img src="https://pic4.zhimg.com/80/v2-fdd8f4e340d6c10754cee5985ec9e6a7_1440w.webp"></p><p><strong>每个 Electron 都是由 1 个主进程、 1 个或多个渲染进程组成的</strong>，开发者的主要工作就是完成主进程的逻辑和渲染进程的逻辑。</p><p>Electron 应用启动时，首先会加载主进程的逻辑，主进程会创建一个或多个窗口，我们暂时可以粗浅的认为一个窗口就代表一个渲染进程，主进程负责管理所有的渲染进程。</p><p>窗口内加载的页面就是开发者要实现的渲染进程的逻辑，我们可以让渲染进程与主进程通信，他们之间是通过 IPC 消息管道进行通信的。虽然有一些特殊的手段让两个渲染进程直接通信（后面的章节我们会介绍），但大部分时候还是通过主进程来中转消息以达到渲染进程间通信的目的。</p><p>Electron 提供的一系列内置模块大部分是专门为主进程的逻辑服务的，比如 app 模块、BrowserWindow 模块和 session 模块等，少量模块是专门为渲染进程的逻辑服务的，比如 ipcRenderer 模块、webFrame 模块等，只有少量模块是两个进程可以同时使用的，比如：clipboard 模块、desktopCapturer 模块等。我们应该清楚这些模块的势力范围，不能在主进程中使用渲染进程的模块，反之也不行。</p><h3 id="Electron-的不足"><a href="#Electron-的不足" class="headerlink" title="Electron 的不足"></a>Electron 的不足</h3><p>基于 Electron 开发桌面 GUI 应用并不是完美的方案，它也有它的不足，综合起来说有以下几点：</p><p>第一：打包后的应用体积巨大</p><p>一个功能不算多的桌面应用，通过 electron-builder 压缩打包后至少要 50M。而且如果开发者不做额外的 Hack 工作的话，用户每次升级应用程序，还要让用户再下载一次同样体积的安装包。这对于应用分发来说是一个不小的负担。但随着网络环境越来越好，用户磁盘的容积越来越大，此问题给用户带来的损失会慢慢被削弱。</p><p>第二：版本发布过快</p><p>为了跟进 Chromium (和 Node.js) 的版本发布节奏，Electron 也有非常频繁的版本发布机制，每次 Chromium 的改动，都可能导致 Electron 冒出很多新的问题，甚至稳定版本都有很多未解决的问题。好在关键核心功能一直以来都是稳定的。</p><p>第三：安全性问题</p><p>Electron 把一些有安全隐患的模块和 API 都设置为默认不可用的状态，但这些模块和 API 都是非常常用的，有的时候开发者不得不打开这些开关，一旦处理不当，就可能导致他们开发的应用存在安全隐患，给开发者乃至终端用户带来伤害。安全问题有很多值得关注的技术细节，以至于 Electron 官方文档中专门开辟出来一个章节号召程序员重视安全问题。</p><p>第五：资源消耗较大</p><p>Electron 底层基于 Chromium 浏览器，资源占用较多一直以来都是 Chromium 被人诟病的问题，目前来看这个问题还没有很好的解决办法，只能依赖 Chromium 团队对 Chromium 的优化工作了。</p><p>第六：性能问题</p><p>Electron 本身是多进程多线程的框架，但 JavaScript 是单线程运行的，如果产品的需求中有大量音视频编解码、复杂数据格式化这类 CPU 消耗性的需求，那么不应该在 Electron 内使用 JavaScript 来实现这些需求，而应该使用 Node.js 的原生模块来实现这些需求。与其说这是一个 Electron 的不足，不如说这是 JavaScript 的不足。</p><p>除了以上这些问题外，Electron 还不支持老版本的 Windows 操作系统，比如 Windows XP，在中国还有一些用户是使用 Windows XP 的，开发者如果需要面向这些用户，应该考虑使用其他技术方案了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>import后面加入{}和不加大括号有什么区别</title>
      <link href="/2024/04/23/%E5%90%8E%E9%9D%A2%E5%8A%A0%E5%85%A5-%E5%92%8C%E4%B8%8D%E5%8A%A0%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
      <url>/2024/04/23/%E5%90%8E%E9%9D%A2%E5%8A%A0%E5%85%A5-%E5%92%8C%E4%B8%8D%E5%8A%A0%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>ES6 使用 import 引入定义的模块，我自己总结的 default 和花括号的问题：export default，不能用花括号；export 但是没有 default，用花括号。</p><p>ES6 中 export 及 export default 的区别</p><p>在 JavaScript ES6 中，export 与 export default 均可用于导出常量、函数、文件、模块等，你可以在其它文件或模块中通过 import+(常量 | 函数 | 文件 | 模块)名的方式，将其导入，以便能够对其进行使用，但在一个文件或模块中，export、import 可以有多个，export default 仅有一个。</p><p>1.export 与 export default 均可用于导出常量、函数、文件、模块等</p><p>2.在一个文件或模块中，export 、import 可以有多个，export default 仅有一个</p><p>3.通过 export 方式导出，在导入时要加{ }，export default 则不需要</p><p>4.export 能直接导出变量表达式，export default 不行</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> it常识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用DNS地址列表和DNS设置教程</title>
      <link href="/2024/04/23/%E5%B8%B8%E7%94%A8DNS%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8/"/>
      <url>/2024/04/23/%E5%B8%B8%E7%94%A8DNS%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一些国内常用-DNS-列表"><a href="#一些国内常用-DNS-列表" class="headerlink" title="一些国内常用 DNS 列表"></a>一些国内常用 DNS 列表</h2><h3 id="1、114DNS：国内用户量巨大的-DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户。"><a href="#1、114DNS：国内用户量巨大的-DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户。" class="headerlink" title="1、114DNS：国内用户量巨大的 DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户。"></a>1、114DNS：国内用户量巨大的 DNS，访问速度快，各省都有节点，同时满足电信、联通、移动各运营商用户。</h3><p>DNS 服务器 IP 地址：<br>首选：114.114.114.114<br>备选：114.114.114.115</p><h3 id="2、阿里-AliDNS：阿里公共-DNS-是阿里巴巴集团推出的-DNS-递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费-DNS-递归解析服务。"><a href="#2、阿里-AliDNS：阿里公共-DNS-是阿里巴巴集团推出的-DNS-递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费-DNS-递归解析服务。" class="headerlink" title="2、阿里 AliDNS：阿里公共 DNS 是阿里巴巴集团推出的 DNS 递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费 DNS 递归解析服务。"></a>2、阿里 AliDNS：阿里公共 DNS 是阿里巴巴集团推出的 DNS 递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费 DNS 递归解析服务。</h3><p>DNS 服务器 IP 地址：<br>首选：223.5.5.5<br>备选：223.6.6.6</p><h3 id="3、Google-DNS：谷歌公共域名解析服务（Google-Public-DNS）是由谷歌公司于-2009-年发布的一项新的-DNS-服务。主要为了替代-ISPs-或其他公司提供的-DNS-服务。"><a href="#3、Google-DNS：谷歌公共域名解析服务（Google-Public-DNS）是由谷歌公司于-2009-年发布的一项新的-DNS-服务。主要为了替代-ISPs-或其他公司提供的-DNS-服务。" class="headerlink" title="3、Google DNS：谷歌公共域名解析服务（Google Public DNS）是由谷歌公司于 2009 年发布的一项新的 DNS 服务。主要为了替代 ISPs 或其他公司提供的 DNS 服务。"></a>3、Google DNS：谷歌公共域名解析服务（Google Public DNS）是由谷歌公司于 2009 年发布的一项新的 DNS 服务。主要为了替代 ISPs 或其他公司提供的 DNS 服务。</h3><p>已被污染，强烈不推荐！<br>DNS 服务器 IP 地址：<br>首选：8.8.8.8<br>备选：8.8.4.4</p><h3 id="4、OpenDNS：OpenDNS-是一个免费的域名解析服务提供商（DNS）。创建于-2006-年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。"><a href="#4、OpenDNS：OpenDNS-是一个免费的域名解析服务提供商（DNS）。创建于-2006-年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。" class="headerlink" title="4、OpenDNS：OpenDNS 是一个免费的域名解析服务提供商（DNS）。创建于 2006 年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。"></a>4、OpenDNS：OpenDNS 是一个免费的域名解析服务提供商（DNS）。创建于 2006 年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。</h3><p>DNS 服务器 IP 地址：<br>首选：208.67.222.222<br>备选：208.67.220.220</p><h3 id="5、百度-BaiduDNS：百度-DNS-旗下云解析服务-依托百度一流基础设施和强大技术实力-为用户提供免费的、超越竞品的服务体验。"><a href="#5、百度-BaiduDNS：百度-DNS-旗下云解析服务-依托百度一流基础设施和强大技术实力-为用户提供免费的、超越竞品的服务体验。" class="headerlink" title="5、百度 BaiduDNS：百度 DNS 旗下云解析服务,依托百度一流基础设施和强大技术实力,为用户提供免费的、超越竞品的服务体验。"></a>5、百度 BaiduDNS：百度 DNS 旗下云解析服务,依托百度一流基础设施和强大技术实力,为用户提供免费的、超越竞品的服务体验。</h3><p>DNS 服务器 IP 地址：<br>首选：180.76.76.76<br>备用：无</p><h3 id="6、CNNIC-SDNS：SDNS-是由中国互联网络信息中心-CNNIC-正式推出的免费的公共云解析服务-SecureDNS-简称-SDNS-。该服务可为广大网民提供安全、智能、高速的上网接入解析服务。"><a href="#6、CNNIC-SDNS：SDNS-是由中国互联网络信息中心-CNNIC-正式推出的免费的公共云解析服务-SecureDNS-简称-SDNS-。该服务可为广大网民提供安全、智能、高速的上网接入解析服务。" class="headerlink" title="6、CNNIC SDNS：SDNS 是由中国互联网络信息中心(CNNIC)正式推出的免费的公共云解析服务(SecureDNS,简称 SDNS)。该服务可为广大网民提供安全、智能、高速的上网接入解析服务。"></a>6、CNNIC SDNS：SDNS 是由中国互联网络信息中心(CNNIC)正式推出的免费的公共云解析服务(SecureDNS,简称 SDNS)。该服务可为广大网民提供安全、智能、高速的上网接入解析服务。</h3><p>DNS 服务器 IP 地址：<br>首选：1.2.4.8<br>备选：202.98.0.6</p><h3 id="7、DNSPod-DNS-：DNSPod-的-Public-DNS-是目前国内第一家支持-ECS-的公共-DNS，是-DNSPod-推出的公共域名解析服务，可以为全网用户提供域名的公共递归解析服务！"><a href="#7、DNSPod-DNS-：DNSPod-的-Public-DNS-是目前国内第一家支持-ECS-的公共-DNS，是-DNSPod-推出的公共域名解析服务，可以为全网用户提供域名的公共递归解析服务！" class="headerlink" title="7、DNSPod DNS+：DNSPod 的 Public DNS+是目前国内第一家支持 ECS 的公共 DNS，是 DNSPod 推出的公共域名解析服务，可以为全网用户提供域名的公共递归解析服务！"></a>7、DNSPod DNS+：DNSPod 的 Public DNS+是目前国内第一家支持 ECS 的公共 DNS，是 DNSPod 推出的公共域名解析服务，可以为全网用户提供域名的公共递归解析服务！</h3><p>DNS 服务器 IP 地址：<br>首选：119.29.29.29<br>备选：182.254.116.116</p><h2 id="DNS-设置教程（以-WIN10-系统为例）"><a href="#DNS-设置教程（以-WIN10-系统为例）" class="headerlink" title="DNS 设置教程（以 WIN10 系统为例）"></a>DNS 设置教程（以 WIN10 系统为例）</h2><p>第一步：点击桌面右下角，”网络“图标，打开”打开网络和 internet 设置“，</p><p>第二步：选择”以太网“— 点击”更改适配器选项“—找到”本地网络“也就是”以太网“，右键打开，点击”属性“—找到”IPv4“协议，双击打开—点击”使用下面的 DNS 服务器地址“，设置相应的 DNS—点击，确认，设置完成。</p>]]></content>
      
      
      <categories>
          
          <category> 电脑常见故障修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术随想</title>
      <link href="/2024/04/23/%E6%8A%80%E6%9C%AF%E9%9A%8F%E6%83%B3/"/>
      <url>/2024/04/23/%E6%8A%80%E6%9C%AF%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>去微软、</p>]]></content>
      
      
      <categories>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 123 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>abc</title>
      <link href="/2024/04/23/abc/"/>
      <url>/2024/04/23/abc/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> abc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2024/04/23/test/"/>
      <url>/2024/04/23/test/</url>
      
        <content type="html"><![CDATA[<p>it’s a test.</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/23/hello-world/"/>
      <url>/2024/04/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> helloworld </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
